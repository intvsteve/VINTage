//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace INTV.Intellicart.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("INTV.Intellicart.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ROM.
        /// </summary>
        internal static string DeviceGroupCommand_Name {
            get {
                return ResourceManager.GetString("DeviceGroupCommand_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play on Intellicart!.
        /// </summary>
        internal static string DownloadCommand_ContextMenuItemName {
            get {
                return ResourceManager.GetString("DownloadCommand_ContextMenuItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to Load {0}.
        /// </summary>
        internal static string DownloadCommand_Failed_Title_Format {
            get {
                return ResourceManager.GetString("DownloadCommand_Failed_Title_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected ROM ({0}) is not compatible with the Intellicart! It may not load or run correctly. Do you still wish to run it?.
        /// </summary>
        internal static string DownloadCommand_IncompatibleRom_Message_Format {
            get {
                return ResourceManager.GetString("DownloadCommand_IncompatibleRom_Message_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incompatible ROM.
        /// </summary>
        internal static string DownloadCommand_IncompatibleRom_Title {
            get {
                return ResourceManager.GetString("DownloadCommand_IncompatibleRom_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ROM for {0} cannot be found at the path:
        ///
        ///{1}.
        /// </summary>
        internal static string DownloadCommand_Missing_Message_Format {
            get {
                return ResourceManager.GetString("DownloadCommand_Missing_Message_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play.
        /// </summary>
        internal static string DownloadCommand_Name {
            get {
                return ResourceManager.GetString("DownloadCommand_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load the selected ROM onto the Intellicart! and run it..
        /// </summary>
        internal static string DownloadCommand_TipDescription {
            get {
                return ResourceManager.GetString("DownloadCommand_TipDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play.
        /// </summary>
        internal static string DownloadCommand_TipTitle {
            get {
                return ResourceManager.GetString("DownloadCommand_TipTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intellicart! Transfer Error.
        /// </summary>
        internal static string DownloadCommandErrorMessage_Title {
            get {
                return ResourceManager.GetString("DownloadCommandErrorMessage_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intellicart! ROM load canceled..
        /// </summary>
        internal static string DownloadRom_CancelMessage {
            get {
                return ResourceManager.GetString("DownloadRom_CancelMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intellicart! ROM Load.
        /// </summary>
        internal static string DownloadRom_CancelTitle {
            get {
                return ResourceManager.GetString("DownloadRom_CancelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem occurred loading the selected ROM..
        /// </summary>
        internal static string DownloadRom_ErrorMessage {
            get {
                return ResourceManager.GetString("DownloadRom_ErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to prepare ROM for the Intellicart!. The necessary utility could not be found at location: {0}.
        /// </summary>
        internal static string DownloadRom_PrepareFailedErrorFormat {
            get {
                return ResourceManager.GetString("DownloadRom_PrepareFailedErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preparing {0} for loading....
        /// </summary>
        internal static string DownloadRom_PrepareUpdateFormat {
            get {
                return ResourceManager.GetString("DownloadRom_PrepareUpdateFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preparing ROM for Intellicart! failed for file: {0}. Expected output file not found: {1}.
        /// </summary>
        internal static string DownloadRom_RomConversionOutputFileNotFoundErrorFormat {
            get {
                return ResourceManager.GetString("DownloadRom_RomConversionOutputFileNotFoundErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred preparing ROM for the Intellicart!. {0} failed with code: {1}..
        /// </summary>
        internal static string DownloadRom_RomConversionToolFailedErrorFormat {
            get {
                return ResourceManager.GetString("DownloadRom_RomConversionToolFailedErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output of the ROM conversion tool is too large to load onto the Intellicart!. You can find the output file at:
        ///    {0}&quot;.
        /// </summary>
        internal static string DownloadRom_RomTooLargeErrorFormat {
            get {
                return ResourceManager.GetString("DownloadRom_RomTooLargeErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load {0} onto Intellicart!....
        /// </summary>
        internal static string DownloadRom_Title_Format {
            get {
                return ResourceManager.GetString("DownloadRom_Title_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading {0} ....
        /// </summary>
        internal static string DownloadRom_Update_Format {
            get {
                return ResourceManager.GetString("DownloadRom_Update_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load {0} onto Intellicart! (est. {1} seconds remaining)....
        /// </summary>
        internal static string DownloadRom_UpdateTitle_Format {
            get {
                return ResourceManager.GetString("DownloadRom_UpdateTitle_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intellicart!.
        /// </summary>
        internal static string Intellicart {
            get {
                return ResourceManager.GetString("Intellicart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OK.
        /// </summary>
        internal static string OKButton_Label {
            get {
                return ResourceManager.GetString("OKButton_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Serial Port....
        /// </summary>
        internal static string SelectPortCommand_Name {
            get {
                return ResourceManager.GetString("SelectPortCommand_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select serial port for Intellicart!:.
        /// </summary>
        internal static string SelectSerialPortDialog_Message {
            get {
                return ResourceManager.GetString("SelectSerialPortDialog_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set Baud Rate.
        /// </summary>
        internal static string SetBaudRateCommand_Name {
            get {
                return ResourceManager.GetString("SetBaudRateCommand_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the baud rate to use when loading a ROM onto the Intellicart!..
        /// </summary>
        internal static string SetBaudRateCommand_TipDescription {
            get {
                return ResourceManager.GetString("SetBaudRateCommand_TipDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the serial port to use to communicate with the Intellicart!..
        /// </summary>
        internal static string SetPortCommand_TipDescription {
            get {
                return ResourceManager.GetString("SetPortCommand_TipDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set Serial Port.
        /// </summary>
        internal static string SetSerialPortCommand_Name {
            get {
                return ResourceManager.GetString("SetSerialPortCommand_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Baud Rate:.
        /// </summary>
        internal static string SettingsPage_BaudRate_Label {
            get {
                return ResourceManager.GetString("SettingsPage_BaudRate_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port Name:.
        /// </summary>
        internal static string SettingsPage_PortName_Label {
            get {
                return ResourceManager.GetString("SettingsPage_PortName_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may need to increase this timeout at low baud rates..
        /// </summary>
        internal static string SettingsPage_PortWriteTimeoutInfo {
            get {
                return ResourceManager.GetString("SettingsPage_PortWriteTimeoutInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset to Default.
        /// </summary>
        internal static string SettingsPage_ResetTimeoutToDefault_Label {
            get {
                return ResourceManager.GetString("SettingsPage_ResetTimeoutToDefault_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select....
        /// </summary>
        internal static string SettingsPage_SelectPortButton_Label {
            get {
                return ResourceManager.GetString("SettingsPage_SelectPortButton_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serial Port.
        /// </summary>
        internal static string SettingsPage_SerialPortGroup_Name {
            get {
                return ResourceManager.GetString("SettingsPage_SerialPortGroup_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serial Write Timeout (s):.
        /// </summary>
        internal static string SettingsPage_SerialWriteTimeout_Label {
            get {
                return ResourceManager.GetString("SettingsPage_SerialWriteTimeout_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intellicart!.
        /// </summary>
        internal static string SettingsPage_Title {
            get {
                return ResourceManager.GetString("SettingsPage_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set Write Timeout.
        /// </summary>
        internal static string SetWriteTimeoutCommand {
            get {
                return ResourceManager.GetString("SetWriteTimeoutCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the serial port write timeout time, in seconds. This value is limited to the range of 30-240 seconds..
        /// </summary>
        internal static string SetWriteTimeoutCommand_TipDescription {
            get {
                return ResourceManager.GetString("SetWriteTimeoutCommand_TipDescription", resourceCulture);
            }
        }
    }
}
