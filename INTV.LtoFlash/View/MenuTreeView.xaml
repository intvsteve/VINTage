<!--
    <copyright file="MenuTreeView.xaml" company="INTV Funhouse">
    Copyright (c) 2014-2015 All Rights Reserved
    <author>Steven A. Orth</author>

    This program is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 2 of the License, or (at your
    option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this software. If not, see: http://www.gnu.org/licenses/.
    or write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

    </copyright>
-->
<sharedView:TreeListView x:Class="INTV.LtoFlash.View.MenuTreeView"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                         xmlns:sharedView="clr-namespace:INTV.Shared.View;assembly=INTV.Shared"
                         xmlns:behaviors="clr-namespace:INTV.Shared.Behavior;assembly=INTV.Shared"
                         xmlns:converter="clr-namespace:INTV.Shared.Converter;assembly=INTV.Shared"
                         xmlns:commands="clr-namespace:INTV.LtoFlash.Commands"
                         xmlns:view="clr-namespace:INTV.LtoFlash.View"
                         xmlns:viewModel="clr-namespace:INTV.LtoFlash.ViewModel"
                         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                         xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                         mc:Ignorable="d" 
                         d:DesignHeight="300" d:DesignWidth="300"
                         ItemsSource="{Binding Root.Items}"
                         IsTextSearchEnabled="True" IsTextSearchCaseSensitive="False" AllowDrop="True" FocusVisualStyle="{x:Null}"
                         behaviors:ShowHideGridViewColumnBehavior.AllowHideColumns="True"
                         behaviors:SelectedItemObserver.SelectedItemObserver="True"
                         behaviors:SelectedItemObserver.ObservedItemSelection="{Binding CurrentSelection, Mode=OneWayToSource}"
                         behaviors:InPlaceEditBehavior.IsEditable="True"
                         behaviors:DragScrollBehavior.AllowsDragScroll="True"
                         behaviors:DragDropRearrangeBehavior.AllowsDragDropRearrange="True"
                         behaviors:PreviewDragEnterBehavior.PreviewDragEnterCommand="{Binding PreviewDragEnterCommand}"
                         behaviors:DragEnterBehavior.DragEnterCommand="{Binding Root.DragItemsCommand}"
                         behaviors:DragOverBehavior.DragOverCommand="{Binding Root.DragItemsCommand}"
                         behaviors:DragDropBehavior.DropCommand="{Binding Root.DropItemsCommand}"
                         behaviors:RetainFocusBehavior.RetainFocus="{Binding Root.RetainFocus}"
                         behaviors:InPlaceEditBehavior.IsEditing="{Binding IsEditing, Mode=TwoWay}"
                         behaviors:DoubleClickBehavior.DoubleClickCommand="{x:Static commands:DownloadCommandGroup.DownloadAndPlayCommand}"
                         behaviors:DynamicContextMenuBehavior.DynamicContextMenu="True"
                         >
    <sharedView:TreeListView.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
        <Style TargetType="{x:Type view:MenuTreeView}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type view:MenuTreeView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" AllowDrop="True">
                            <DockPanel>
                                <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility ="Disabled"
                                                              DockPanel.Dock="Top" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv_">
                                    <GridViewHeaderRowPresenter Columns="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" AllowsColumnReorder="False" AllowDrop="False"/>
                                </ScrollViewer>
                                <ScrollViewer x:Name="_tv_scrollviewer" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv_">
                                    <ItemsPresenter AllowDrop="True"/>
                                </ScrollViewer>
                            </DockPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
        </Style>

        <Style TargetType="{x:Type sharedView:TreeListViewItem}">
            <Setter Property="ItemsSource" Value="{Binding Items}"/>
            <Setter Property="AllowDrop" Value="True"/>
            <Setter Property="IsExpanded" Value="{Binding IsOpen, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="behaviors:DragStartBehavior.PreviewDragStartCommand" Value="{Binding DragStartCommand}"/>
            <Setter Property="behaviors:DragEnterBehavior.DragEnterCommand" Value="{Binding DragItemsCommand}"/>
            <Setter Property="behaviors:DragOverBehavior.DragOverCommand" Value="{Binding DragItemsCommand}"/>
            <Setter Property="behaviors:DragDropBehavior.DropCommand" Value="{Binding DropItemsCommand}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type sharedView:TreeListViewItem}">
                        <StackPanel>
                            <Border Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <GridViewRowPresenter x:Name="PART_Header" Content="{TemplateBinding Header}"
                                                                  Columns="{Binding Path=Columns, RelativeSource={RelativeSource AncestorType={x:Type sharedView:TreeListView}}}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <converter:LevelToIndentConverter x:Key="LevelToIndentConverter"/>

        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16" Height="16" Background="Transparent" Padding="5">
                            <Path x:Name="ExpandPath" Data="M0,0L0,6L6,0z" Fill="White" Stroke="#FF818181">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="CellTemplate_LongName">
            <DockPanel VerticalAlignment="Center">
                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                          Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type sharedView:TreeListViewItem}}}"
                                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type sharedView:TreeListViewItem}}}" ClickMode="Press"/>
                <Image Margin="0,0,4,0" Width="16" Height="16" Source="{Binding Icon}" ToolTip="{Binding IconTipStrip}"/>
                <TextBlock x:Name="LongName" VerticalAlignment="Center" Text="{Binding LongName, Mode=TwoWay}" Tag="{x:Static viewModel:MenuLayoutColumn.LongName}"
                                       ToolTip="{x:Static viewModel:MenuLayoutViewModel.LongNameTip}"
                                       behaviors:InPlaceEditBehavior.InPlaceEditorType="{x:Static sharedView:TextBlockEditorAdorner.InPlaceEditorType}"
                                       sharedView:TextBlockEditorAdorner.MaxLength="{Binding MaxLongNameLength_xp, Mode=OneWay}"
                                       sharedView:TextBlockEditorAdorner.RestrictToGromCharacters="True"/>
            </DockPanel>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=HasItems, RelativeSource={RelativeSource AncestorType={x:Type sharedView:TreeListViewItem}}}" Value="False">
                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        <DataTemplate x:Key="CellTemplate_ShortName">
            <TextBlock x:Name="ShortName" VerticalAlignment="Center" Text="{Binding ShortName, Mode=TwoWay}" Tag="{x:Static viewModel:MenuLayoutColumn.ShortName}"
                                   ToolTip="{x:Static viewModel:MenuLayoutViewModel.ShortNameTip}"
                                   behaviors:InPlaceEditBehavior.InPlaceEditorType="{x:Static sharedView:TextBlockEditorAdorner.InPlaceEditorType}"
                                   sharedView:TextBlockEditorAdorner.MaxLength="{Binding MaxShortNameLength_xp, Mode=OneWay}"
                                   sharedView:TextBlockEditorAdorner.RestrictToGromCharacters="True"/>
        </DataTemplate>
        <DataTemplate x:Key="CellTemplate_FolderInfo">
            <TextBlock VerticalAlignment="Center" Text="{Binding Status}"/>
        </DataTemplate>
        <DataTemplate x:Key="CellTemplate_Manual">
            <Grid VerticalAlignment="Center" Visibility="{Binding HasSupportFiles, Converter={StaticResource BooleanToVisibility}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border BorderBrush="AliceBlue" BorderThickness="1">
                    <sharedView:FilePathIndicator x:Name="Manual" Grid.Column="0" Padding="2,0,2,0" HorizontalAlignment="Stretch" Path="{Binding Manual}" AllowDrop="True"
                                                            behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragManualEnterCommand}"
                                                            behaviors:DragOverBehavior.DragOverCommand="{Binding DragManualOverCommand}"
                                                            behaviors:DragDropBehavior.DropCommand="{Binding DragManualDropCommand}"/>
                </Border>
                <Button x:Name="SetManual" Grid.Column="1" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{x:Static viewModel:ProgramViewModel.SetManualTip}"
                                    Command="{x:Static viewModel:ProgramViewModel.SetManualCommand}" CommandParameter="{Binding}">
                    <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/manual_16x.png" Width="16" Height="16"/>
                </Button>
                <Button x:Name="RemoveManual" Grid.Column="2" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{x:Static viewModel:ProgramViewModel.RemoveManualTip}"
                                    Command="{x:Static viewModel:ProgramViewModel.RemoveManualCommand}" CommandParameter="{Binding}">
                    <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/delete_document_16xLG.png" Width="16" Height="16"/>
                </Button>
            </Grid>
            <DataTemplate.Triggers>
                <Trigger SourceName="Manual" Property="Path" Value="{x:Null}">
                    <Setter TargetName="RemoveManual" Property="Visibility" Value="Collapsed"/>
                    <Setter Property="ToolTip" Value="{x:Static viewModel:ProgramViewModel.ManualTip}"/>
                </Trigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        <DataTemplate x:Key="CellTemplate_SaveData">
            <Grid VerticalAlignment="Center" Visibility="{Binding HasSupportFiles, Converter={StaticResource BooleanToVisibility}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.Resources></Grid.Resources>
                <Border BorderBrush="AliceBlue" BorderThickness="1">
                    <sharedView:FilePathIndicator x:Name="SaveData" Grid.Column="0" Padding="2,0,2,0" HorizontalAlignment="Stretch" Path="{Binding SaveData}" AllowDrop="True"
                                                            behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragSaveDataEnterCommand}"
                                                            behaviors:DragOverBehavior.DragOverCommand="{Binding DragSaveDataOverCommand}"
                                                            behaviors:DragDropBehavior.DropCommand="{Binding DragSaveDataDropCommand}"/>
                </Border>
                <Button x:Name="SetSaveData" Grid.Column="1" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{Binding Path=ToolTip, Source={x:Static commands:MenuLayoutCommandGroup.SetSaveDataCommand}, Mode=OneTime}"
                                    Command="{x:Static commands:MenuLayoutCommandGroup.SetSaveDataCommand}" CommandParameter="{Binding}">
                    <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/manual_16x.png" Width="16" Height="16"/>
                </Button>
                <Button x:Name="RemoveSaveData" Grid.Column="2" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{Binding Path=ToolTip, Source={x:Static commands:MenuLayoutCommandGroup.RemoveSaveDataCommand}, Mode=OneTime}"
                                    Command="{x:Static commands:MenuLayoutCommandGroup.RemoveSaveDataCommand}" CommandParameter="{Binding}">
                    <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/delete_document_16xLG.png" Width="16" Height="16"/>
                </Button>
            </Grid>
            <DataTemplate.Triggers>
                <Trigger SourceName="SaveData" Property="Path" Value="{x:Null}">
                    <Setter TargetName="RemoveSaveData" Property="Visibility" Value="Collapsed"/>
                    <!--<Setter Property="ToolTip" Value="{x:Static commands:MenuLayoutCommandGroup.SaveDataTip}"/>-->
                </Trigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <viewModel:ManualPathFolderInfoTemplateSelector x:Key="ColumnThreeTemplateSelector"
                        ManualPath="{StaticResource CellTemplate_Manual}"
                        FolderInfo="{StaticResource CellTemplate_FolderInfo}"/>
    </sharedView:TreeListView.Resources>
    <sharedView:TreeListView.Columns>
        <GridViewColumn CellTemplate="{StaticResource CellTemplate_LongName}" Width="{Binding Path=MenuLayoutLongNameColWidth, Source={x:Static viewModel:MenuLayoutViewModel.Settings}, Mode=OneTime}">
            <GridViewColumnHeader Content="{x:Static viewModel:MenuLayoutViewModel.LongNameHeader}"
                                                      behaviors:ActualSizeObserver.ActualSizeObserver="True"
                                                      behaviors:ActualSizeObserver.ObservedWidth="{Binding LongNameColumnWidth, Mode=OneWayToSource}"/>
        </GridViewColumn>
        <GridViewColumn CellTemplate="{StaticResource CellTemplate_ShortName}" Width="{Binding Path=MenuLayoutShortNameColWidth, Source={x:Static viewModel:MenuLayoutViewModel.Settings}, Mode=OneTime}">
            <GridViewColumnHeader Content="{x:Static viewModel:MenuLayoutViewModel.ShortNameHeader}"
                                                      behaviors:ActualSizeObserver.ActualSizeObserver="True"
                                                      behaviors:ActualSizeObserver.ObservedWidth="{Binding ShortNameColumnWidth, Mode=OneWayToSource}"/>
        </GridViewColumn>
        <GridViewColumn CellTemplateSelector="{StaticResource ColumnThreeTemplateSelector}" Width="{Binding Path=MenuLayoutManualColWidth, Source={x:Static viewModel:MenuLayoutViewModel.Settings}, Mode=OneTime}">
            <GridViewColumnHeader Content="{x:Static viewModel:MenuLayoutViewModel.ManualHeader}"
                                                      behaviors:ActualSizeObserver.ActualSizeObserver="True"
                                                      behaviors:ActualSizeObserver.ObservedWidth="{Binding ManualColumnWidth, Mode=OneWayToSource}"/>
        </GridViewColumn>
        <!--<GridViewColumn CellTemplate="{StaticResource CellTemplate_SaveData}" Width="{Binding Path=MenuLayoutSaveDataColWidth, Source={x:Static viewModel:MenuLayoutViewModel.Settings}, Mode=OneTime}"
                                            behaviors:ShowHideGridViewColumnBehavior.IsVisible="{Binding Path=ShowAdvancedFeatures, Source={x:Static viewModel:MenuLayoutViewModel.Settings}}">
                                <GridViewColumnHeader Content="{x:Static viewModel:MenuLayoutViewModel.SaveDataHeader}"
                                                      behaviors:ActualSizeObserver.ActualSizeObserver="True"
                                                      behaviors:ActualSizeObserver.ObservedWidth="{Binding SaveDataColumnWidth, Mode=OneWayToSource}"/>
                            </GridViewColumn>-->
    </sharedView:TreeListView.Columns>
</sharedView:TreeListView>
