<!--
    <copyright file="MainWindow.xaml" company="INTV Funhouse">
    Copyright (c) 2014-2017 All Rights Reserved
    <author>Steven A. Orth</author>

    This program is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 2 of the License, or (at your
    option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this software. If not, see: http://www.gnu.org/licenses/.
    or write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

    </copyright>
-->
<Ribbon:RibbonWindow x:Class="Locutus.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:properties="clr-namespace:Locutus.Properties"
        xmlns:behaviors="clr-namespace:INTV.Shared.Behavior;assembly=INTV.Shared"
        xmlns:intvCommands="clr-namespace:INTV.Shared.Commands;assembly=INTV.Shared"
        xmlns:intvSettings="clr-namespace:INTV.Shared.Utility;assembly=INTV.Shared"
        xmlns:intvViewModel="clr-namespace:INTV.Shared.ViewModel;assembly=INTV.Shared"
        xmlns:intvView="clr-namespace:INTV.Shared.View;assembly=INTV.Shared"
        xmlns:converter="clr-namespace:INTV.Shared.Converter;assembly=INTV.Shared"
        xmlns:locutus="clr-namespace:Locutus.View"
        xmlns:Ribbon="clr-namespace:INTV.Ribbon;assembly=INTV.Ribbon"
        xmlns:locutusViewModel="clr-namespace:Locutus.ViewModel"
        xmlns:ltoFlashView="clr-namespace:INTV.LtoFlash.View;assembly=INTV.LtoFlash"
        xmlns:ltoFlashModel="clr-namespace:INTV.LtoFlash.Model;assembly=INTV.LtoFlash"
        xmlns:ltoFlashCommands="clr-namespace:INTV.LtoFlash.Commands;assembly=INTV.LtoFlash"
        xmlns:ltoFlashViewModel="clr-namespace:INTV.LtoFlash.ViewModel;assembly=INTV.LtoFlash"
        xmlns:ltoFlashConverter="clr-namespace:INTV.LtoFlash.Converter;assembly=INTV.LtoFlash"
        xmlns:intellicartCommands="clr-namespace:INTV.Intellicart.Commands;assembly=INTV.Intellicart"
        Title="{Binding Path=Title}" UseLayoutRounding="True" SnapsToDevicePixels="True"
        Icon="pack://application:,,,/Resources/LTOFlashApplicationIcon.ico"
        Width="{Binding Path=WindowSize.Width, Source={x:Static intvSettings:SingleInstanceApplication.SharedAppSettings}, Mode=OneTime}"
        Height="{Binding Path=WindowSize.Height, Source={x:Static intvSettings:SingleInstanceApplication.SharedAppSettings}, Mode=OneTime}"
        Left="{Binding Path=WindowPosition.X, Source={x:Static intvSettings:SingleInstanceApplication.SharedAppSettings}, Mode=OneTime}"
        Top="{Binding Path=WindowPosition.Y, Source={x:Static intvSettings:SingleInstanceApplication.SharedAppSettings}, Mode=OneTime}"
        WindowState="{Binding Path=WindowState, Source={x:Static intvSettings:SingleInstanceApplication.SharedAppSettings}, Mode=OneTime}"
        >
    <Ribbon:RibbonWindow.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
        <converter:InvertedBooleanToVisibilityConverter x:Key="InverseBooleanToVisibility"/>
        <converter:NullToBooleanConverter x:Key="NullToBoolean"/>
        <ltoFlashConverter:ConsolePowerStateToOpacityConverter x:Key="PowerOn"/>
        <!-- Move the RibbonTextBox style to Themes/generic.xaml in the INTV.Ribbon assembly??? -->
        <Style TargetType="{x:Type Ribbon:RibbonTextBox}">
            <Setter Property="TextBoxWidth" Value="120"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Ribbon:RibbonTextBox}">
                        <Border x:Name="MainBorder" Margin="1">
                            <Grid Margin="1,0" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition x:Name="OuterTextColumn" Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Image x:Name="Image" RenderOptions.BitmapScalingMode="NearestNeighbor" Grid.Column="1" HorizontalAlignment="Center" Height="32" Margin="1" Grid.Row="0" Source="{TemplateBinding LargeImageSource}" VerticalAlignment="Center" Width="32"/>
                                <Grid x:Name="Grid" Grid.Column="1" HorizontalAlignment="Stretch" Grid.Row="1" VerticalAlignment="Center">
                                    <Grid x:Name="InnerGrid" HorizontalAlignment="Stretch" Margin="1" VerticalAlignment="Top">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition x:Name="TextColumn" Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid x:Name="TwoLineTextPanel" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                                            <Ribbon:RibbonTwoLineText x:Name="TwoLineText" HorizontalAlignment="Stretch" LineStackingStrategy="BlockLineHeight" LineHeight="13" Margin="2,0" TextAlignment="Left" Text="{TemplateBinding Label}"/>
                                            <Rectangle x:Name="FocusVisual" Margin="1" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2" Visibility="Collapsed"/>
                                        </Grid>
                                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" HorizontalAlignment="Right" Height="20" Margin="2,0" VerticalAlignment="Center">
                                            <ScrollViewer x:Name="PART_ContentHost" Margin="0,1" VerticalAlignment="Center" Width="{TemplateBinding TextBoxWidth}"/>
                                        </Border>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding ControlSizeDefinition.Width.IsStar, RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="Width" TargetName="TextColumn" Value="*"/>
                                <Setter Property="Width" TargetName="OuterTextColumn" Value="*"/>
                                <Setter Property="Width" TargetName="PART_ContentHost" Value="Auto"/>
                                <Setter Property="HorizontalAlignment" TargetName="Border" Value="Stretch"/>
                                <Setter Property="HorizontalAlignment" TargetName="Grid" Value="Stretch"/>
                                <Setter Property="HorizontalAlignment" TargetName="InnerGrid" Value="Stretch"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Large">
                                <Setter Property="MinWidth" Value="44"/>
                                <Setter Property="Height" Value="66"/>
                                <Setter Property="Height" TargetName="Image" Value="32"/>
                                <Setter Property="Width" TargetName="Image" Value="32"/>
                                <Setter Property="MinHeight" TargetName="Grid" Value="26"/>
                                <Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="True"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small">
                                <Setter Property="Height" Value="22"/>
                                <Setter Property="Source" TargetName="Image" Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="Height" TargetName="Image" Value="16"/>
                                <Setter Property="Width" TargetName="Image" Value="16"/>
                                <Setter Property="HorizontalAlignment" TargetName="Image" Value="Left"/>
                                <Setter Property="Margin" TargetName="Image" Value="2,0,1,0"/>
                                <Setter Property="Margin" TargetName="TwoLineText" Value="2,0,1,0"/>
                                <Setter Property="Ribbon:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="False"/>
                                <Setter Property="Grid.Column" TargetName="Image" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="Image" Value="1"/>
                                <Setter Property="Margin" TargetName="InnerGrid" Value="0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Collapsed">
                                <Setter Property="Visibility" TargetName="Image" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}" Value="False">
                                <Setter Property="Visibility" TargetName="TwoLineTextPanel" Value="Collapsed"/>
                            </DataTrigger>
                            <Trigger Property="ShowKeyboardCues" Value="True">
                                <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="Image" Value="0.5"/>
                                <Setter Property="Background" TargetName="Border" Value="#90DEDEDE"/>
                                <Setter Property="BorderBrush" TargetName="Border" Value="#90B1BBC6"/>
                                <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="#FF9E9E9E"/>
                            </Trigger>
                            <Trigger Property="IsInControlGroup" Value="True">
                                <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="BorderThickness" TargetName="MainBorder" Value="0,0,1,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Ribbon:RibbonWindow.Resources>
    <Ribbon:RibbonWindow.DataContext>
        <locutusViewModel:MainWindowViewModel />
    </Ribbon:RibbonWindow.DataContext>
    <Ribbon:RibbonWindow.InputBindings>
        <KeyBinding Command="{Binding RomList.AddRomsCommand}" Gesture="CTRL+O"/>
        <KeyBinding Command="{Binding RomList.AddRomsCommand}" CommandParameter="true" Gesture="CTRL+SHIFT+O"/>
        <KeyBinding Command="{x:Static intvCommands:RomListCommandGroup.ValidateRomsCommand}" CommandParameter="{Binding Path=RomList}" Gesture="F5"/>
        <KeyBinding Command="{Binding MenuLayout.AddSelectedItemsCommand}" CommandParameter="{Binding RomList.CurrentSelection}" Key="Right" Modifiers="Alt"/>
        <KeyBinding Command="{x:Static ltoFlashCommands:MenuLayoutCommandGroup.NewDirectoryCommand}" CommandParameter="{Binding Path=MenuLayout}" Gesture="CTRL+SHIFT+D"/>
        <KeyBinding Command="{x:Static ltoFlashCommands:DownloadCommandGroup.DownloadAndPlayCommand}" CommandParameter="{Binding Path=SelectedItem, ElementName=_romList}" Key="P" Modifiers="Control" />
        <KeyBinding Command="{x:Static ltoFlashCommands:DownloadCommandGroup.DownloadAndPlayPromptCommand}" CommandParameter="{Binding Path=LtoFlash}" Gesture="CTRL+SHIFT+P"/>
        <KeyBinding Command="{x:Static ltoFlashCommands:DeviceCommandGroup.SearchForDevicesCommand}" CommandParameter="{Binding Path=LtoFlash}" Gesture="CTRL+F"/>
        <KeyBinding Command="{x:Static ltoFlashCommands:DeviceCommandGroup.DisconnectDeviceCommand}" CommandParameter="{Binding Path=LtoFlash}" Gesture="CTRL+D"/>
        <KeyBinding Command="{x:Static intellicartCommands:DeviceCommandGroup.DownloadCommand}" CommandParameter="{Binding Path=Intellicart}" Gesture="CTRL+SHIFT+I"/>
    </Ribbon:RibbonWindow.InputBindings>
    <Grid Name="_rootVisual">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Ribbon:Ribbon x:Name="_ribbon" Grid.Row="0" ShowQuickAccessToolBarOnTop="True">
            <Ribbon:Ribbon.ApplicationMenu>
                <Ribbon:RibbonApplicationMenu x:Name="_menu" SmallImageSource="pack://application:,,,/Resources/Images/console_16xLG.png">
                    <Ribbon:RibbonApplicationMenu.AuxiliaryPaneContent>
                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Image Grid.Row="0" Margin="0,8,0,0" HorizontalAlignment="Center" Source="pack://application:,,,/Resources/Images/LTOFlashAbout.png" Width="88" Height="113"/>
                            <TextBlock Margin="0,8,0,0" Grid.Row="1" Grid.Column="1" Text="LTO Flash!" FontWeight="ExtraBold" FontStyle="Italic" FontSize="14" HorizontalAlignment="Center"/>
                            <StackPanel Margin="0,8,0,0" Grid.Row="2" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center">
                                <TextBlock Text="Version "/>
                                <TextBlock Text="{Binding Source={x:Static intvSettings:SingleInstanceApplication.Version}, Mode=OneTime}"/>
                            </StackPanel>
                            <TextBlock Grid.Row="3" Grid.Column="1" Margin="0,8,0,0" HorizontalAlignment="Center"><Bold><Italic>LTO Flash! </Italic></Bold> is a product from Left Turn Only, LLC.</TextBlock>
                            <StackPanel Grid.Row="4" Grid.Column="1" Margin="0,8,0,0" Orientation="Vertical" HorizontalAlignment="Center">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <TextBlock Text="Steve Orth and "/>
                                    <TextBlock>
                                        <Hyperlink NavigateUri="http://www.intvfunhouse.com"
                                                   Command="{x:Static behaviors:ClickHyperlinkBehavior.ClickHyperlinkCommand}"
                                                   CommandParameter="{Binding Path=NavigateUri, RelativeSource={RelativeSource Self}}">
                                            INTV Funhouse
                                        </Hyperlink>
                                    </TextBlock>
                                    <TextBlock HorizontalAlignment="Center" Text=" and"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <TextBlock Text="Joe Zbiciak and "/>
                                    <TextBlock>
                                        <Hyperlink NavigateUri="http://leftturnonly.info"
                                                   Command="{x:Static behaviors:ClickHyperlinkBehavior.ClickHyperlinkCommand}"
                                                   CommandParameter="{Binding Path=NavigateUri, RelativeSource={RelativeSource Self}}">
                                            Left Turn Only, LLC
                                        </Hyperlink>
                                    </TextBlock>
                                </StackPanel>
                                <TextBlock HorizontalAlignment="Center" Text="are not affiliated with Intellivision Productions."/>
                                <TextBlock HorizontalAlignment="Center" >
                                    <Hyperlink NavigateUri="{x:Static locutusViewModel:MainWindowViewModel.CreditsFilePath}"
                                               Command="{x:Static behaviors:ClickHyperlinkBehavior.ClickHyperlinkCommand}"
                                               CommandParameter="{Binding Path=NavigateUri, RelativeSource={RelativeSource Self}}">
                                        Credits
                                    </Hyperlink>
                                </TextBlock>
                            </StackPanel>
                            <TextBlock Grid.Row="5" Grid.Column="1" Margin="0,8,0,0" HorizontalAlignment="Center">
                                Intellivision<Run Typography.Variants="Superscript">®</Run> is a registered trademark
                            </TextBlock>
                            <StackPanel Grid.Row="6" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center">
                                <TextBlock Text="of "/>
                                <TextBlock>
                                    <Hyperlink NavigateUri="http://www.intellivisionlives.com"
                                               Command="{x:Static behaviors:ClickHyperlinkBehavior.ClickHyperlinkCommand}"
                                               CommandParameter="{Binding Path=NavigateUri, RelativeSource={RelativeSource Self}}">
                                        Intellivision Productions, Inc.
                                    </Hyperlink>
                                </TextBlock>
                            </StackPanel>
                            <TextBlock Grid.Row="7" Grid.Column="1" Margin="0,12,0,0" HorizontalAlignment="Center" Text="{Binding Source={x:Static intvSettings:SingleInstanceApplication.Copyright}, Mode=OneTime}"/>
                            <TextBlock Grid.Row="8" Grid.Column="1" Margin="0,0,0,8" HorizontalAlignment="Center" Text="All Rights Reserved."/>
                        </Grid>
                    </Ribbon:RibbonApplicationMenu.AuxiliaryPaneContent>
                        <Ribbon:RibbonApplicationMenu.FooterPaneContent>
                        <DockPanel x:Name="_rootMenuFooter" LastChildFill="False"/>
                    </Ribbon:RibbonApplicationMenu.FooterPaneContent>
                </Ribbon:RibbonApplicationMenu>
            </Ribbon:Ribbon.ApplicationMenu>
            <Ribbon:RibbonTab x:Name="_home" Header="{Binding Path=Name, Source={x:Static intvCommands:RootCommandGroup.HomeRibbonTabCommand}, Mode=OneTime}">
                <!--<Ribbon:RibbonGroup Header="TESTING">
                </Ribbon:RibbonGroup>-->
            </Ribbon:RibbonTab>
            <!--<Ribbon:RibbonTab Header="{x:Static intvViewModel:MainToolbarViewModel.JzIntvHeader}">
                <Ribbon:RibbonGroup Header="{x:Static intvViewModel:MainToolbarViewModel.JzIntvDisplayGroupHeader}">
                    <Ribbon:RibbonGroup.Resources>
                        <locutusConverter:DisplayResolutionToImageSourceConverter x:Key="ResolutionToImage"/>
                        <converter:DisplayResolutionToStringConverter x:Key="ResolutionToString"/>
                        <converter:DisplayResolutionToBooleanConverter x:Key="ResolutionToBoolean"/>
                        <converter:DisplayModeToBoolean x:Key="ModeToBoolean"/>
                    </Ribbon:RibbonGroup.Resources>
                    <Ribbon:RibbonSplitButton Label="{x:Static intvViewModel:MainToolbarViewModel.JzIntvResolutionButton}"
                                       LargeImageSource="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/ScreenResolution_32x32.png">
                        <Ribbon:RibbonGallery SelectedValuePath="Tag" ScrollViewer.VerticalScrollBarVisibility="Hidden" IsSynchronizedWithCurrentItem="True"
                                       SelectedValue="{Binding Path=JzIntvConfiguration.Resolution, Converter={StaticResource ResolutionToString}}">
                            <Ribbon:RibbonGalleryCategory x:Name="_resolutions">
                                <Ribbon:RibbonGalleryItem Tag="{x:Static jzIntvModel:DisplayResolution.Small}">
                                    <DockPanel>
                                        <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/resolution_320x200_unselected_16x16.png"/>
                                        <TextBlock Margin="4,0,0,0" Text="320x200"/>
                                    </DockPanel>
                                </Ribbon:RibbonGalleryItem>
                                <Ribbon:RibbonGalleryItem Tag="{x:Static jzIntvModel:DisplayResolution.Medium}">
                                    <DockPanel>
                                        <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/resolution_320x240_unselected_16x16.png"/>
                                        <TextBlock Margin="4,0,0,0" Text="320x240"/>
                                    </DockPanel>
                                </Ribbon:RibbonGalleryItem>
                                <Ribbon:RibbonGalleryItem Tag="{x:Static jzIntvModel:DisplayResolution.Large}">
                                    <DockPanel>
                                        <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/resolution_640x480_unselected_16x16.png"/>
                                        <TextBlock Margin="4,0,0,0" Text="640x480"/>
                                    </DockPanel>
                                </Ribbon:RibbonGalleryItem>
                            </Ribbon:RibbonGalleryCategory>
                        </Ribbon:RibbonGallery>
                    </Ribbon:RibbonSplitButton>
                    <Ribbon:RibbonCheckBox Label="{x:Static intvViewModel:MainToolbarViewModel.JzIntvFullscreenButton}" LargeImageSource="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/fullscreen_32x32.png"
                                    IsChecked="{Binding JzIntvConfiguration.DisplayMode, Mode=TwoWay, Converter={StaticResource ModeToBoolean}}"/>
                </Ribbon:RibbonGroup>
                <Ribbon:RibbonGroup Header="{x:Static intvViewModel:MainToolbarViewModel.JzIntvHardwareGroupHeader}">
                    <Ribbon:RibbonCheckBox Margin="4"  Label="{x:Static intvViewModel:MainToolbarViewModel.JzIntvEnableIntellivoice}" IsChecked="{Binding JzIntvConfiguration.EnableIntellivoice, Mode=TwoWay}"/>
                    <Ribbon:RibbonCheckBox Margin="4,0,4,4"  Label="{x:Static intvViewModel:MainToolbarViewModel.JzIntvEnableEcs}" IsChecked="{Binding JzIntvConfiguration.EnableEcs, Mode=TwoWay}"/>
                </Ribbon:RibbonGroup>
            </Ribbon:RibbonTab>-->
        </Ribbon:Ribbon>
        <Grid Grid.Row="1">
            <Grid.Resources>
                <ltoFlashConverter:ProgramToProgramDescriptionConverter x:Key="ProgramToProgramDescription"/>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="{Binding MenuLayout.ViewWidth, Mode=OneTime}"/>
            </Grid.ColumnDefinitions>
            <intvView:RomListView x:Name="_romList"  Grid.Column="0" Grid.Row="0" Margin="-1,0,1,0" DataContext="{Binding RomList}">
                <ListView.SelectedItem>
                    <!-- This enables the feature in which the selected item in MenuLayout is highlighted in the ROM list (if it can be found). -->
                    <MultiBinding Converter="{StaticResource ProgramToProgramDescription}" Mode="OneWay">
                        <Binding Path="Programs"/>
                        <Binding Path="SelectedItem" ElementName="_menuLayout"/>
                        <Binding Path="." ElementName="_romList"/>
                    </MultiBinding>
                </ListView.SelectedItem>
            </intvView:RomListView>
            <Border Grid.Column="0" Grid.Row="0" Background="LightGray" Opacity="0.25" AllowDrop="True"
                    DataContext="{Binding RomList}"
                    behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragOverCommand}"
                    behaviors:DragOverBehavior.DragOverCommand="{Binding DragOverCommand}"
                    behaviors:DragDropBehavior.DropCommand="{Binding DropFilesCommand}"
                    behaviors:DynamicContextMenuBehavior.DynamicContextMenu="True"
                    Visibility="{Binding Path=HasItems, ElementName=_romList, Converter={StaticResource InverseBooleanToVisibility}}">
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static intvViewModel:RomListViewModel.DropFilesHere}"/>
            </Border>
            <GridSplitter Grid.Column="1" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="4" Focusable="False"
                          BorderThickness="0,0,1,0" BorderBrush="{Binding Path=BorderBrush, ElementName=_romList}"/>
            <!-- TODO: Move this into its own control in INTV.LtoFlash -->
            <Grid x:Name="_ltoFlashFeatures" Grid.Column="2" Grid.Row="0"
                  behaviors:ActualSizeObserver.ActualSizeObserver="True"
                  behaviors:ActualSizeObserver.ObservedWidth="{Binding MenuLayout.ViewWidth, Mode=OneWayToSource}"
                  behaviors:CollapsingGridSplitterBehavior.CollapsibleGridSplitter="{Binding ElementName=AdvancedFeaturesSplitter}">
                <Grid.Resources>
                    <Style TargetType="{x:Type intvView:TreeListViewItem}">
                        <Setter Property="ItemsSource" Value="{Binding Items}"/>
                        <Setter Property="AllowDrop" Value="True"/>
                        <Setter Property="IsExpanded" Value="{Binding IsOpen, Mode=TwoWay}"/>
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                        <Setter Property="behaviors:DragStartBehavior.PreviewDragStartCommand" Value="{Binding DragStartCommand}"/>
                        <Setter Property="behaviors:DragEnterBehavior.DragEnterCommand" Value="{Binding DragItemsCommand}"/>
                        <Setter Property="behaviors:DragOverBehavior.DragOverCommand" Value="{Binding DragItemsCommand}"/>
                        <Setter Property="behaviors:DragDropBehavior.DropCommand" Value="{Binding DropItemsCommand}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type intvView:TreeListViewItem}">
                                    <StackPanel>
                                        <Border Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                            <GridViewRowPresenter x:Name="PART_Header" Content="{TemplateBinding Header}"
                                                                  Columns="{Binding Path=Columns, RelativeSource={RelativeSource AncestorType={x:Type intvView:TreeListView}}}" />
                                        </Border>
                                        <ItemsPresenter x:Name="ItemsHost"/>
                                    </StackPanel>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="false">
                                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="HasHeader" Value="false"/>
                                                <Condition Property="Width" Value="Auto"/>
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="HasHeader" Value="false"/>
                                                <Condition Property="Height" Value="Auto"/>
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="true"/>
                                                <Condition Property="IsSelectionActive" Value="false"/>
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <converter:LevelToIndentConverter x:Key="LevelToIndentConverter"/>

                    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="Width" Value="16"/>
                        <Setter Property="Height" Value="16"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Width="16" Height="16" Background="Transparent" Padding="5">
                                        <Path x:Name="ExpandPath" Data="M0,0L0,6L6,0z" Fill="White" Stroke="#FF818181">
                                            <Path.RenderTransform>
                                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                <Setter.Value>
                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsChecked" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="False"/>
                                                <Condition Property="IsChecked" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                        </MultiTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <DataTemplate x:Key="CellTemplate_LongName">
                        <DockPanel VerticalAlignment="Center">
                            <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                          Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type intvView:TreeListViewItem}}}"
                                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type intvView:TreeListViewItem}}}" ClickMode="Press"/>
                            <Image Margin="0,0,4,0" Width="16" Height="16" Source="{Binding Icon}" ToolTip="{Binding IconTipStrip}"/>
                            <TextBlock x:Name="LongName" VerticalAlignment="Center" Text="{Binding LongName, Mode=TwoWay}" Tag="{x:Static ltoFlashViewModel:MenuLayoutColumn.LongName}"
                                       ToolTip="{x:Static ltoFlashViewModel:MenuLayoutViewModel.LongNameTip}"
                                       behaviors:InPlaceEditBehavior.InPlaceEditorType="{x:Static intvView:TextBlockEditorAdorner.InPlaceEditorType}"
                                       intvView:TextBlockEditorAdorner.MaxLength="{Binding MaxLongNameLength_xp, Mode=OneWay}"
                                       intvView:TextBlockEditorAdorner.RestrictToGromCharacters="True"/>
                        </DockPanel>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=HasItems, RelativeSource={RelativeSource AncestorType={x:Type intvView:TreeListViewItem}}}" Value="False">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                    <DataTemplate x:Key="CellTemplate_ShortName">
                        <TextBlock VerticalAlignment="Center" Text="{Binding ShortName, Mode=TwoWay}" Tag="{x:Static ltoFlashViewModel:MenuLayoutColumn.ShortName}"
                                   ToolTip="{x:Static ltoFlashViewModel:MenuLayoutViewModel.ShortNameTip}"
                                   behaviors:InPlaceEditBehavior.InPlaceEditorType="{x:Static intvView:TextBlockEditorAdorner.InPlaceEditorType}"
                                   intvView:TextBlockEditorAdorner.MaxLength="{Binding MaxShortNameLength_xp, Mode=OneWay}"
                                   intvView:TextBlockEditorAdorner.RestrictToGromCharacters="True"/>
                    </DataTemplate>
                    <DataTemplate x:Key="CellTemplate_FolderInfo">
                        <TextBlock VerticalAlignment="Center" Text="{Binding Status}"/>
                    </DataTemplate>
                    <DataTemplate x:Key="CellTemplate_Manual">
                        <Grid VerticalAlignment="Center" Visibility="{Binding HasSupportFiles, Converter={StaticResource BooleanToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border BorderBrush="AliceBlue" BorderThickness="1">
                                <intvView:FilePathIndicator x:Name="Manual" Grid.Column="0" Padding="2,0,2,0" HorizontalAlignment="Stretch" Path="{Binding Manual}" AllowDrop="True"
                                                            behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragManualEnterCommand}"
                                                            behaviors:DragOverBehavior.DragOverCommand="{Binding DragManualOverCommand}"
                                                            behaviors:DragDropBehavior.DropCommand="{Binding DragManualDropCommand}"/>
                            </Border>
                            <Button x:Name="SetManual" Grid.Column="1" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{x:Static ltoFlashViewModel:ProgramViewModel.SetManualTip}"
                                    Command="ltoFlashViewModel:ProgramViewModel.SetManualCommand" CommandParameter="{Binding}">
                                <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/manual_16x.png" Width="16" Height="16"/>
                            </Button>
                            <Button x:Name="RemoveManual" Grid.Column="2" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{x:Static ltoFlashViewModel:ProgramViewModel.RemoveManualTip}"
                                    Command="ltoFlashViewModel:ProgramViewModel.RemoveManualCommand" CommandParameter="{Binding}">
                                <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/delete_document_16xLG.png" Width="16" Height="16"/>
                            </Button>
                        </Grid>
                        <DataTemplate.Triggers>
                            <Trigger SourceName="Manual" Property="Path" Value="{x:Null}">
                                <Setter TargetName="RemoveManual" Property="Visibility" Value="Collapsed"/>
                                <Setter Property="ToolTip" Value="{x:Static ltoFlashViewModel:ProgramViewModel.ManualTip}"/>
                            </Trigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                    <DataTemplate x:Key="CellTemplate_SaveData">
                        <Grid VerticalAlignment="Center" Visibility="{Binding HasSupportFiles, Converter={StaticResource BooleanToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.Resources></Grid.Resources>
                            <Border BorderBrush="AliceBlue" BorderThickness="1">
                                <intvView:FilePathIndicator x:Name="SaveData" Grid.Column="0" Padding="2,0,2,0" HorizontalAlignment="Stretch" Path="{Binding SaveData}" AllowDrop="True"
                                                            behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragSaveDataEnterCommand}"
                                                            behaviors:DragOverBehavior.DragOverCommand="{Binding DragSaveDataOverCommand}"
                                                            behaviors:DragDropBehavior.DropCommand="{Binding DragSaveDataDropCommand}"/>
                            </Border>
                            <Button x:Name="SetSaveData" Grid.Column="1" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{Binding Path=ToolTip, Source={x:Static ltoFlashCommands:MenuLayoutCommandGroup.SetSaveDataCommand}, Mode=OneTime}"
                                    Command="ltoFlashCommands:MenuLayoutCommandGroup.SetSaveDataCommand" CommandParameter="{Binding}">
                                <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/manual_16x.png" Width="16" Height="16"/>
                            </Button>
                            <Button x:Name="RemoveSaveData" Grid.Column="2" Background="{x:Null}" BorderThickness="0" Focusable="False"
                                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibility}}"
                                    ToolTip="{Binding Path=ToolTip, Source={x:Static ltoFlashCommands:MenuLayoutCommandGroup.RemoveSaveDataCommand}, Mode=OneTime}"
                                    Command="ltoFlashCommands:MenuLayoutCommandGroup.RemoveSaveDataCommand" CommandParameter="{Binding}">
                                <Image Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/delete_document_16xLG.png" Width="16" Height="16"/>
                            </Button>
                        </Grid>
                        <DataTemplate.Triggers>
                            <Trigger SourceName="SaveData" Property="Path" Value="{x:Null}">
                                <Setter TargetName="RemoveSaveData" Property="Visibility" Value="Collapsed"/>
                                <!--<Setter Property="ToolTip" Value="{x:Static ltoFlashCommands:MenuLayoutCommandGroup.SaveDataTip}"/>-->
                            </Trigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>

                    <ltoFlashViewModel:ManualPathFolderInfoTemplateSelector x:Key="ColumnThreeTemplateSelector"
                        ManualPath="{StaticResource CellTemplate_Manual}"
                        FolderInfo="{StaticResource CellTemplate_FolderInfo}"/>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Grid.Row="0" behaviors:CollapsingGridSplitterBehavior.CollapsibleGridSplitter="{Binding ElementName=FileSystemFeaturesSplitter}">
                    <Grid.Resources>
                        <Style TargetType="{x:Type intvView:TreeListView}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type intvView:TreeListView}">
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" AllowDrop="True">
                                            <DockPanel>
                                                <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility ="Disabled"
                                                              DockPanel.Dock="Top" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv_">
                                                    <GridViewHeaderRowPresenter Columns="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" AllowsColumnReorder="False" AllowDrop="False"/>
                                                </ScrollViewer>
                                                <ScrollViewer x:Name="_tv_scrollviewer" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv_">
                                                    <ItemsPresenter AllowDrop="True"/>
                                                </ScrollViewer>
                                            </DockPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
                            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Column="0" Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Grid.Row="0" BorderThickness="0,1,0,1" Padding="4,2,0,1" BorderBrush="LightGray" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{x:Static ltoFlashViewModel:MenuLayoutViewModel.Title}"/>
                                <Separator Margin="4,0">
                                    <Separator.LayoutTransform>
                                        <RotateTransform Angle="90"/>
                                    </Separator.LayoutTransform>
                                </Separator>
                                <TextBlock Text="{Binding MenuLayout.LongName}"/>
                                <TextBlock Text=" :"/>
                                <TextBlock Margin="4,0,0,0" Text="{Binding MenuLayout.Status}"/>
                            </StackPanel>
                        </Border>
                        <Border Grid.Column="1" BorderThickness="0,1,0,1" BorderBrush="LightGray" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <Image Margin="4,0,2,0" Source="pack://application:,,,/INTV.LtoFlash;component/Resources/Images/lto_flash_contents_not_in_sync_16xLG.png"
                                   ToolTip="{x:Static ltoFlashViewModel:LtoFlashViewModel.ContentsNotInSyncToolTip}"
                                   Visibility="{Binding LtoFlash.ShowFileSystemsDifferIcon, Converter={StaticResource BooleanToVisibility}}">
                            </Image>
                        </Border>
                        <Border Grid.Column="2" BorderThickness="0,1,0,1" BorderBrush="LightGray" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <Image Margin="2,0,2,0" Source="pack://application:,,,/INTV.Shared;component/ViewModel/Resources/Images/console_16xLG.png"
                                   ToolTip="{Binding LtoFlash.ActiveLtoFlashDevice.PowerState, Mode=OneWay}"
                                   Opacity="{Binding LtoFlash.ActiveLtoFlashDevice.IsPowerOn, Converter={StaticResource PowerOn}}">
                            </Image>
                        </Border>
                        <Button Grid.Column="3"
                                ToolTip="{x:Static ltoFlashViewModel:MenuLayoutViewModel.NewFolderTip}"
                                Command="{x:Static ltoFlashCommands:MenuLayoutCommandGroup.NewDirectoryCommand}" CommandParameter="{Binding Path=MenuLayout}">
                            <Image Source="pack://application:,,,/INTV.LtoFlash;component/Resources/Images/new_folder.png" Width="16" Height="16" Margin="2,0,4,0"/>
                        </Button>
                        <Button Grid.Column="4"
                                ToolTip="{Binding Path=MenuLayout.DeleteSelectedItemTip}"
                                Command="{x:Static ltoFlashCommands:MenuLayoutCommandGroup.DeleteItemsCommand}" CommandParameter="{Binding Path=MenuLayout}">
                            <Image Source="{Binding Path=MenuLayout.DeleteSelectedItemIcon}" Width="16" Height="16" Margin="2,0,4,0"/>
                        </Button>
                        <ComboBox Grid.Column="5" ItemsSource="{Binding MenuLayout.AvailableColors}" Width="112"
                                  ToolTip="{x:Static ltoFlashViewModel:MenuLayoutViewModel.ColorTip}"
                                  SelectedItem="{Binding MenuLayout.CurrentSelection.Color, Mode=TwoWay}"
                                  IsEnabled="{Binding MenuLayout.CurrentSelection, Converter={StaticResource NullToBoolean}}"
                                  behaviors:SelectionChangedCommandBehavior.SelectionChangedCommand="{Binding MenuLayout.SetColorCommand}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                        <Rectangle Width="14" Height="14" RadiusX="2" RadiusY="2" Fill="{Binding Fill}" Stroke="DarkSlateGray" VerticalAlignment="Center"/>
                                        <TextBlock Margin="4,0,0,0" Text="{Binding Name}" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                    <ltoFlashView:MenuTreeView x:Name="_menuLayout" Grid.Column="0" Grid.Row="1" DataContext="{Binding LtoFlash.HostPCMenuLayout}">
                        <ltoFlashView:MenuTreeView.InputBindings>
                            <KeyBinding Command="{x:Static ltoFlashCommands:MenuLayoutCommandGroup.DeleteItemsCommand}" CommandParameter="{Binding}" Gesture="Delete"/>
                            </ltoFlashView:MenuTreeView.InputBindings>
                    </ltoFlashView:MenuTreeView>
                    <Border Grid.Column="0" Grid.Row="1" Background="LightGray" Opacity="0.25" BorderThickness="0" AllowDrop="True"
                            DataContext="{Binding LtoFlash.HostPCMenuLayout}"
                            behaviors:DragEnterBehavior.DragEnterCommand="{Binding DragItemsCommand}"
                            behaviors:DragOverBehavior.DragOverCommand="{Binding DragItemsCommand}"
                            behaviors:DragDropBehavior.DropCommand="{Binding DropItemsCommand}"
                            behaviors:DynamicContextMenuBehavior.DynamicContextMenu="True"
                            Visibility="{Binding ShowOverlay, Converter={StaticResource BooleanToVisibility}}">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding OverlayText}"/>
                    </Border>
                    <GridSplitter x:Name="FileSystemFeaturesSplitter" Grid.Column="0" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="4" Focusable="False"
                                  BorderThickness="0,0,0,1" BorderBrush="{Binding Path=BorderBrush, ElementName=_menuLayout}"
                                  Visibility="{Binding Path=ShowFileSystemDetails, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}"/>
                    <ltoFlashView:FileSystemStatisticsView Grid.Column="0" Grid.Row="3" Visibility="{Binding Path=ShowFileSystemDetails, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}"/>
                    <StatusBar Grid.Row="4" BorderThickness="1">
                        <StatusBarItem>
                            <TextBlock Text="{x:Static ltoFlashViewModel:MenuLayoutViewModel.StorageUsed}"/>
                        </StatusBarItem>
                        <StatusBarItem HorizontalContentAlignment="Stretch">
                            <Grid>
                                <ProgressBar Minimum="0" Maximum="1" Value="{Binding MenuLayout.OverallInUseRatio, Mode=OneWay}" ToolTip="{Binding MenuLayout.OverallUsageDetails}" ToolTipService.ShowDuration="16384"/>
                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding MenuLayout.OverallInUseRatio, StringFormat={}{0:P2}, Mode=OneWay}" ToolTip="{Binding MenuLayout.OverallUsageDetails}" ToolTipService.ShowDuration="16384"/>
                            </Grid>
                        </StatusBarItem>
                    </StatusBar>
                </Grid>
                <GridSplitter x:Name="AdvancedFeaturesSplitter" Grid.Column="1" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="4" Focusable="False"
                              BorderThickness="0,0,1,0" BorderBrush="{Binding Path=BorderBrush, ElementName=_romList}"
                              Visibility="{Binding Path=ShowAdvancedFeatures, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}"/>
                <Grid Grid.Column="2" Grid.Row="0" Visibility="{Binding Path=ShowAdvancedFeatures, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}">
                    <Grid.Resources>
                        <Style TargetType="{x:Type intvView:TreeListView}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type intvView:TreeListView}">
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" AllowDrop="False">
                                            <DockPanel>
                                                <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility ="Disabled"
                                                              DockPanel.Dock="Top" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv2_">
                                                    <GridViewHeaderRowPresenter Columns="{Binding Path=Columns, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" AllowsColumnReorder="False" AllowDrop="False"/>
                                                </ScrollViewer>
                                                <ScrollViewer x:Name="_tv_scrollviewer2" behaviors:SynchronizedScrollBehavior.ScrollGroup="_tlv2_">
                                                    <ItemsPresenter AllowDrop="True"/>
                                                </ScrollViewer>
                                            </DockPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Border Grid.Column="0" Grid.Row="0" BorderThickness="0,1,1,1" Padding="4,2,0,1" BorderBrush="LightGray" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{Binding LtoFlash.LongName}"/>
                            <TextBlock Text=" :"/>
                            <TextBlock Margin="4,0,0,0" Text="{Binding LtoFlash.Status}"/>
                        </StackPanel>
                    </Border>
                    <intvView:TreeListView x:Name="_loctusFileSystem" Grid.Column="0" Grid.Row="1" ItemsSource="{Binding LtoFlash.Root.Items}"
                                           IsTextSearchEnabled="True" IsTextSearchCaseSensitive="False" FocusVisualStyle="{x:Null}"
                                           behaviors:ShowHideGridViewColumnBehavior.AllowHideColumns="True">
                        <intvView:TreeListView.Columns>
                            <GridViewColumn CellTemplate="{StaticResource CellTemplate_LongName}">
                                <GridViewColumnHeader Content="{x:Static ltoFlashViewModel:MenuLayoutViewModel.LongNameHeader}"/>
                            </GridViewColumn>
                            <GridViewColumn CellTemplate="{StaticResource CellTemplate_ShortName}">
                                <GridViewColumnHeader Content="{x:Static ltoFlashViewModel:MenuLayoutViewModel.ShortNameHeader}"/>
                            </GridViewColumn>
                            <GridViewColumn CellTemplateSelector="{StaticResource ColumnThreeTemplateSelector}">
                                <GridViewColumnHeader Content="{x:Static ltoFlashViewModel:MenuLayoutViewModel.ManualHeader}"/>
                            </GridViewColumn>
                            <GridViewColumn CellTemplate="{StaticResource CellTemplate_SaveData}"
                                            behaviors:ShowHideGridViewColumnBehavior.IsVisible="{Binding Path=ShowAdvancedFeatures, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}}">
                                <GridViewColumnHeader Content="{x:Static ltoFlashViewModel:MenuLayoutViewModel.SaveDataHeader}"/>
                            </GridViewColumn>
                        </intvView:TreeListView.Columns>

                    </intvView:TreeListView>
                    <GridSplitter Grid.Column="0" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="4" Focusable="False"
                                  BorderThickness="0,0,0,1" BorderBrush="{Binding Path=BorderBrush, ElementName=_menuLayout}"
                                  Visibility="{Binding Path=ShowAdvancedFeatures, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}"/>
                    <ltoFlashView:FileSystemStatisticsView Grid.Column="0" Grid.Row="3" Visibility="{Binding Path=ShowAdvancedFeatures, Source={x:Static ltoFlashViewModel:MenuLayoutViewModel.Settings}, Converter={StaticResource BooleanToVisibility}}"/>
                    <StatusBar Grid.Row="4" BorderThickness="1">
                        <StatusBarItem>
                            <TextBlock Text="{Binding LtoFlash.FolderCount}"/>
                        </StatusBarItem>
                        <StatusBarItem>
                            <TextBlock Text="{Binding LtoFlash.FileCount}"/>
                        </StatusBarItem>
                        <StatusBarItem>
                            <TextBlock Text="{Binding LtoFlash.ForkCount}"/>
                        </StatusBarItem>
                    </StatusBar>
                </Grid>
            </Grid>
        </Grid>
        <StatusBar VerticalAlignment="Bottom" Grid.Row="2">
            <StatusBar.Resources>
                <converter:SingleOrPluralFormatConverter x:Key="CountFormatter"/>
                <converter:ItemCountToVisibilityConverter x:Key="CountToVisibility"/>
            </StatusBar.Resources>
            <StatusBarItem Margin="8,0,0,0">
                <TextBlock Text="{Binding RomList.Programs.Count, Converter={StaticResource CountFormatter}, ConverterParameter={x:Static intvViewModel:RomListViewModel.NumItemsFormat}}"/>
            </StatusBarItem>
            <StatusBarItem>
                <Separator />
            </StatusBarItem>
            <StatusBarItem Visibility="{Binding RomList.CurrentSelection.Count, Converter={StaticResource CountToVisibility}}">
                <TextBlock Text="{Binding RomList.CurrentSelection.Count, Converter={StaticResource CountFormatter}, ConverterParameter={x:Static intvViewModel:RomListViewModel.NumItemsSelectedFormat}}"/>
            </StatusBarItem>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <Image Margin="4,0" Source="{Binding LtoFlash.LtoDeviceConnectedImage}"/>
                    <TextBlock Text="{Binding LtoFlash.ActiveLtoFlashDevice.DisplayName}"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
        <intvView:ProgressIndicator x:Name="_progressBar" Grid.RowSpan="3" Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibility}}"/>
    </Grid>
</Ribbon:RibbonWindow>
